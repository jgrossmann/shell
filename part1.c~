/*
 * project 1 (shell) main.c template 
 *
 * project partner names and other information up here, please
 *
 */

/* you probably won't need any other header files for this project */
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <ctype.h>
#include <sys/resource.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <poll.h>
#include <signal.h>
#include <errno.h>
#include <assert.h>
//Global variables used in functions
char m = 's', mode_ret;


struct rusage timeusage, Ctimeusage;
struct timeval usertime,childusertime, kerneltime,childkerneltime;
long double totusertime = 0.0, totkerneltime = 0.0;

void time(void){
	getrusage(RUSAGE_SELF,&timeusage); getrusage(RUSAGE_CHILDREN,&Ctimeusage);
	usertime = timeusage.ru_utime; childusertime=Ctimeusage.ru_utime;
	totusertime=usertime.tv_sec+childusertime.tv_sec+(usertime.tv_usec+childusertime.tv_usec)*(.000001);
	kerneltime=timeusage.ru_stime; childkerneltime=Ctimeusage.ru_stime;
	totkerneltime=kerneltime.tv_sec+childkerneltime.tv_sec+(kerneltime.tv_usec+childkerneltime.tv_usec)*(.000001);
	printf("Total user time: %08Lf, Total kernel time: %08Lf\n",totusertime,totkerneltime);
	return;
}


char mode(char** cmd, int numstrings, char m){
	if(numstrings < 2){
		if(cmd[0][0]!='m'){
			return 'f';
		}
		if(m == 's'){
			printf("sequential mode\n");
			return 's';
		}else if(m == 'p'){
			printf("parallel mode\n");
			return 'p';
		}else{
			return 'f';
		}
	}else if(!strcasecmp(cmd[1], "sequential")||cmd[1][0] == 's'||!strcasecmp(cmd[1], "seq")){
		if(m=='s'){
			printf("You are already in sequential mode.\n");
		}else{
			printf("Going into sequential mode after jobs finish.\n");
		}
		return 's';
	}else if(!strcasecmp(cmd[1], "parallel")||cmd[1][0] == 'p'||strcasecmp(cmd[1], "par")){
		if(m=='p'){
			printf("You are already in parallel mode.\n");
		}else{
			printf("Going into parallel mode.\n");
		}
		return 'p';
	}
	return 'f';
}


void loopfree(char** arr, int numcommands){
	int i = 0;
	for(;i<numcommands;i++){
			free(arr[i]);
	}
	free(arr);
}

int Numstrings(char* string, char delim){
	int i = 0, count = 1;
	for(;i<strlen(string);i++){
		if(string[i] == delim){
			count++;
		}
	}
	return count;
}

void removeextrainput(char* s){
	if(s==NULL){
		return;}
	int len = strlen(s), i = 0, j = 0, numspaces = 0, space = 0;
	int text = 0, symbol = 0, remove = 0, numcolons = 0;
	for(; i < len; i++){
		if(s[i] == '#'){
			s[i] = '\0';break;
		}
	}
	i = 0; len =strlen(s);
	while(i<len-numcolons){
		if(s[i]==';'){
			j=i+1; symbol++;
			if(text==0){
				remove = 1;
			}
		}else if(isalpha(s[i]) ||(!isspace(s[i]) && s[i]!=';')){
			text = 1; symbol = 0; remove = 0;
		}
		if(symbol > 1 || remove > 0){
			while(j<len-numcolons){
				s[j-1] = s[j]; j++;
			}
			
			symbol--; numcolons++; remove = 0;
			continue;
		}
		i++;
	}
	s[len-numcolons]='\0';
	i=0,j=0,len = strlen(s), text = 0, symbol = 0;
	while(i<len-numspaces){
		if(isspace(s[i])){
			j = i +1; space++; //know its a space but not sure if its 2 spaces in a row.
			if(text == 0 || symbol == 1){
				space++;
			}
			if(s[i] == '\n' || s[i] == '\t' || s[i] == '\r'){
				space++; //makes it so it definitely is removed
			}
		}else if(s[i] == ';'){
			symbol = 1;
			if(space>0){
				space++;
			}
		}
		if(space >1){
			while(j<len -numspaces){
				s[j-1] = s[j]; j++;
			}
			space--; numspaces++;
			if(symbol == 1){
				space--;
			}
			continue;
		}
		if(isalpha(s[i]) || (!isspace(s[i])&&s[i]!=';')){
			space = 0;
			text = 1; symbol = 0;
		}
		i++;
	}
	if(isspace(s[i-1])||s[i-1]==';'){
		s[i-1] = '\0';
	}
	else{
		s[len-numspaces] = '\0';
	}
}

char** tokenify(char *s, char* delim){
	if(s==NULL){
		return NULL;}
	int len = strlen(s);
	char** tokstrings;
	int i = 0, numtokens = 0;
	for(;i<len;i++){
		if(s[i] == delim[0]){
			numtokens++;
		}
	}
	if(numtokens==0){
		tokstrings = malloc(sizeof(char*) +sizeof(NULL));
		tokstrings[0] = strdup(s); tokstrings[1] = NULL;
		return tokstrings;}
	tokstrings = malloc(sizeof(char *) * (numtokens + 1)+sizeof(NULL));
	tokstrings[0] = strdup(strtok(s,delim)); i = 1;
	while(i<numtokens+1){
		tokstrings[i] = strdup(strtok(NULL, delim));
		i++;
	}
	tokstrings[i] = NULL;
	return tokstrings;
}		

void parallel(char** commands, int numcommands, int i/*commandnum*/){
	int numchildren = numcommands - i, k = 0, j = 0, numstrings = 0, flag = 0;
	pid_t* childPIDS;
	char** cmd;
	childPIDS = malloc(sizeof(pid_t)*numchildren+sizeof(NULL));
	pid_t childpid;
	for(;i<numcommands;i++){
		numstrings = Numstrings(commands[i], ' ');
		cmd = tokenify(commands[i], " ");
		int h = 0;
		while(cmd[h]!='\0'){
			printf("%s",cmd[h]); h++;
		}printf("\n\n");
						
		if((!strcasecmp(cmd[0], "mode"))||(strlen(cmd[0])==1)){
			mode_ret = mode(cmd, numstrings, m);
			if(mode_ret == m){
			loopfree(cmd, numstrings); numchildren--; 
			continue;
			}else if(mode_ret == 'f'){
			}else{
				m = mode_ret; loopfree(cmd, numstrings); numchildren--;
				continue;
			}
		}
		if(!strcasecmp(cmd[0], "exit")){
			flag = 1; numchildren--;
			loopfree(cmd, numstrings); printf("Will exit shell once all jobs have finished.");
		 	continue;
		}
		if((childpid=fork())==0){
			printf("In child: %d with PID: %d\n", j, getpid());
							
			if (execv(cmd[0], cmd) < 0) {
		 		fprintf(stderr, "execv failed: %s\n", strerror	(errno)); 
				loopfree(cmd,numstrings); loopfree(commands,numcommands); free(childPIDS);
				exit(0);
  			}

		}else{
			childPIDS[j] = childpid;
		}
		loopfree(cmd, numstrings);
		j++;
	}
	for(; k<numchildren; k++){
		int rstatus=0;
		pid_t child;
		if(childPIDS[k]>0){
			child = waitpid(childPIDS[k],&rstatus,0);
			printf("Parent got carcass of child process %d, return val %d\n", child, rstatus);
			printf("Parallel mode bitch\n");
			assert(childPIDS[k] == child);
			childPIDS[k] = 0;
		}else{
		    /* fork had an error; bail out */
		    fprintf(stderr, "fork failed: %s\n", strerror(errno)); exit(0);
		}
	}	
	free(childPIDS);
	if(flag > 0){
		loopfree(commands, numcommands); time();
		exit(0);
	}
}

int 
main(int argc, char **argv) {
    char *prompt = "hitme> ", nulltest;
	char **commands;
    printf("%s", prompt);
    fflush(stdout);
    char buffer[1024];
	int i = 0, numcommands=0,numstrings=0;
    while ((nulltest=fgets(buffer, 1024, stdin)) != NULL) {
        /* process current command line in buffer */
		i = 0;
		int len = strlen(buffer);
		buffer[len -1] = '\0';
		removeextrainput(buffer);
		numcommands = Numstrings(buffer, ';');
		commands = tokenify(buffer, ";");
		if(commands == NULL){
			printf("Error reading input.");
			printf("%s", prompt);
			fflush(stdout);
			continue;
		}
		while(i < numcommands){
			if(m=='p'){
				parallel(commands, numcommands, i);
				break;
			}
			numstrings = Numstrings(commands[i], ' ');
			char** cmd = tokenify(commands[i], " ");
			if(!strcasecmp(cmd[0], "exit")){
				loopfree(commands,numcommands);
				loopfree(cmd, numstrings);time();
				exit(0);
			}
			if((!strcasecmp(cmd[0], "mode"))||(strlen(cmd[0])==1)){
					mode_ret = mode(cmd, numstrings, m);
					if(mode_ret == m){
						i++; loopfree(cmd, numstrings); continue;
					}else if(mode_ret == 'f'){
					}else{
						m = mode_ret; loopfree(cmd, numstrings); continue;
					}
			}
       		pid_t p = fork();
        	if (p == 0) {
            /* in child */
				
            	if (execv(cmd[0], cmd) < 0) {
                	fprintf(stderr, "execv failed: %s\n", strerror	(errno)); 
					loopfree(cmd,numstrings);loopfree(commands,numcommands);
					exit(0);
            	}
			} else if (p > 0) {
            /* in parent */
            	int rstatus = 0;
            	pid_t childp = wait(&rstatus);

            /* for this simple starter code, the only child process we should
               "wait" for is the one we just spun off, so check that we got the
               same process id */ 
            	assert(p == childp);

            	printf("Parent got carcass of child process %d, return val %d\n", childp, rstatus);
        	} else {
            /* fork had an error; bail out */
            	fprintf(stderr, "fork failed: %s\n", strerror(errno));
        	}
			
			i++; //next command
			loopfree(cmd, numstrings); 
		}
		loopfree(commands, numcommands);
		//all commands have finished
        printf("%s", prompt);
        fflush(stdout);
    }
	if(nulltest==NULL){
		time();
		return 0;
	}
	loopfree(commands, numcommands);
	time();
    return 0;
}



	
